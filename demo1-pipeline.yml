name: 1.0.$(BuildID)-${{ parameters.env }}
pr: none
pool:
  vmImage: ubuntu-latest
parameters:
  - name: env
    displayName: Environment
    type: string
    default: ci
    values:
      - ci
      - t1
      - t2
      - t3
      - a1
      - a2
      - p1
      - p2
      - p3

resources:
  repositories:
    - repository: templates
      type: github
      name: margani/azure-pipeline-templates
      endpoint: margani
      ref: refs/heads/poc
    - repository: variables
      type: github
      name: margani/azure-pipeline-variables
      endpoint: margani
      ref: refs/heads/poc

variables:
  - template: naming.yml@variables
  - template: product.yml@variables
    parameters:
      productName: My First Demo Product
  - template: env.yml@variables
    parameters:
      env: ${{ parameters.env }}
stages:
  - stage: DemoStage1
    condition: eq('${{ parameters.env }}', 'ci')
    jobs:
      - job: DemoJob11
        steps:
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: pipeline/initialize-pipeline.yml@templates
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: functions/new-function.yml@templates
          - template: tests/test-variables.yml@templates
            parameters:
              expectations:
                env: ci
                productName: "My First Demo Product"
                varEnvSubscription: "myorg-devtest-subscription"
                varResourceGroupTypeName: "rg"
                varFunctionsTypeName: "func"
                varVnetTypeName: "vnet"
                varSubnetTypeName: "subnet"
      - job: DemoJob12
        dependsOn: DemoJob11
        variables:
          - template: env.yml@variables
            parameters:
              env: a1
          - template: product.yml@variables
            parameters:
              productName: My Second Demo Product
        steps:
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: pipeline/initialize-pipeline.yml@templates
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: functions/new-function.yml@templates
          - template: tests/test-variables.yml@templates
            parameters:
              expectations:
                env: a1
                productName: "My Second Demo Product"
                varEnvSubscription: "myorg-production-subscription"
      - job: DemoJob13
        dependsOn: DemoJob12
        condition: eq('${{ parameters.env }}', 'ci')
        variables:
          - template: env.yml@variables
            parameters:
              env: t3
          - template: product.yml@variables
            parameters:
              productName: My Third Demo Product
        steps:
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: pipeline/initialize-pipeline.yml@templates
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: functions/new-function.yml@templates
          - template: tests/test-variables.yml@templates
            parameters:
              expectations:
                env: t3
                productName: "My Third Demo Product"
                varEnvSubscription: "myorg-devtest-subscription"
  - stage: DemoStage2
    condition: succeeded()
    jobs:
      - job: DemoJob21
        condition: succeeded()
        steps:
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: pipeline/initialize-pipeline.yml@templates
          - template: tests/display-env.yml@templates
          - template: tests/display-files.yml@templates
          - template: functions/new-function.yml@templates
          - template: tests/display-env.yml@templates
